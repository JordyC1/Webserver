


          
Necesito crear un plan detallado para implementar el panel de indicadores visuales por tipo de insecto con semaforizaci√≥n. Primero debo analizar a fondo la estructura actual del proyecto, los endpoints disponibles, los modelos existentes y la arquitectura de widgets para crear un plan preciso y completo.
        
            
toolName: view_files
            
status: success
          
            
filePath: c:\Users\adria\OneDrive\Escritorio\Trabajo\ProyectoEmilJordy\Webserver\lib\views\dashboard_screen.dart
          
Necesito ver m√°s del dashboard actual para entender su estructura completa y luego revisar los widgets de gr√°ficas existentes.
        
            
toolName: view_files
            
status: success
          
            
filePath: c:\Users\adria\OneDrive\Escritorio\Trabajo\ProyectoEmilJordy\Webserver\lib\views\dashboard_screen.dart
          
Ahora necesito ver el resto del dashboard para entender la estructura completa de las tarjetas y widgets responsivos.
        
            
toolName: view_files
            
status: success
          
            
filePath: c:\Users\adria\OneDrive\Escritorio\Trabajo\ProyectoEmilJordy\Webserver\lib\views\dashboard_screen.dart
          
Ahora necesito revisar los widgets de gr√°ficas existentes para entender su estructura y patrones de implementaci√≥n.
        
            
toolName: view_folder
            
status: success
          
c:\Users\adria\OneDrive\Escritorio\Trabajo\ProyectoEmilJordy\Webserver\lib\widgets\charts
          
Voy a revisar el widget base para entender la estructura com√∫n de las gr√°ficas y luego examinar algunos widgets espec√≠ficos para entender los patrones.
        
            
toolName: view_files
            
status: success
          
            
filePath: c:\Users\adria\OneDrive\Escritorio\Trabajo\ProyectoEmilJordy\Webserver\lib\widgets\charts\base_chart_card.dart
c:\Users\adria\OneDrive\Escritorio\Trabajo\ProyectoEmilJordy\Webserver\lib\widgets\charts\insect_distribution_pie_chart.dart
          
Ahora voy a revisar el resto del archivo de distribuci√≥n de insectos y tambi√©n examinar el servicio de datos para entender mejor los patrones.
        
            
toolName: view_files
            
status: success
          
            
filePath: c:\Users\adria\OneDrive\Escritorio\Trabajo\ProyectoEmilJordy\Webserver\lib\widgets\charts\insect_distribution_pie_chart.dart
c:\Users\adria\OneDrive\Escritorio\Trabajo\ProyectoEmilJordy\Webserver\lib\services\chart_data_service.dart
          
Ahora voy a revisar el servicio de alertas y los modelos para entender mejor la estructura de datos disponible.
        
            
toolName: view_files
            
status: success
          
            
filePath: c:\Users\adria\OneDrive\Escritorio\Trabajo\ProyectoEmilJordy\Webserver\lib\services\alert_service.dart
c:\Users\adria\OneDrive\Escritorio\Trabajo\ProyectoEmilJordy\Webserver\lib\models\chart_models.dart
          
Ahora voy a revisar el archivo de configuraci√≥n de endpoints PHP para entender mejor qu√© datos est√°n disponibles.
        
            
toolName: search_by_regex
            
status: success
          
          
Ahora voy a revisar la estructura del directorio principal para entender mejor la organizaci√≥n del proyecto y luego crear el plan detallado.
        
            
toolName: view_folder
            
status: success
          
c:\Users\adria\OneDrive\Escritorio\Trabajo\ProyectoEmilJordy\Webserver\lib
          
# Plan Detallado para Dashboard con Indicadores Visuales por Tipo de Insecto

## üìã An√°lisis del Estado Actual

### Estructura Existente Verificada:
- **Modelos**: <mcfile name="chart_models.dart" path="lib/models/chart_models.dart"></mcfile> con `InsectTypeData`, `DailyTrendPoint`, `AlertSeverityData`
- **Servicios**: <mcfile name="chart_data_service.dart" path="lib/services/chart_data_service.dart"></mcfile> y <mcfile name="alert_service.dart" path="lib/services/alert_service.dart"></mcfile>
- **Widgets Base**: <mcfile name="base_chart_card.dart" path="lib/widgets/charts/base_chart_card.dart"></mcfile> para estructura com√∫n
- **Tema**: <mcfile name="app_theme.dart" path="lib/theme/app_theme.dart"></mcfile> con `insectTypeColors` y m√©todos `getInsectTypeColor`
- **Dashboard**: <mcfile name="dashboard_screen.dart" path="lib/views/dashboard_screen.dart"></mcfile> con sistema responsive

### Endpoints PHP Disponibles:
- `get_lecturas.php` - Datos completos de lecturas
- `get_tipos_insectos.php` - Lista de tipos de insectos
- `get_alertas.php` - Sistema de alertas con severidad
- `get_promedio_diario.php` - Promedios diarios
- `get_promedio_tipo_por_dia.php` - Promedios por tipo y d√≠a

## üéØ Plan de Implementaci√≥n

### **FASE 1: Modelos de Datos**

#### 1.1 Crear Modelo para Indicadores de Insectos
**Archivo**: <mcfile name="chart_models.dart" path="lib/models/chart_models.dart"></mcfile>

**Nuevas Clases a Agregar**:
```dart
class InsectIndicatorData {
  final String tipoInsecto;
  final int cantidadHoy;
  final int cantidadAyer;
  final double porcentajeCambio;
  final String tendencia; // 'up', 'down', 'stable'
  final Color colorTipo;
  final AlertLevel nivelAlerta;
  final int umbralAlerta;
  final bool tieneAlertaActiva;
}

class AlertLevel {
  final String nivel; // 'normal', 'warning', 'critical'
  final Color color;
  final IconData icon;
}

class InsectDashboardSummary {
  final List<InsectIndicatorData> indicadores;
  final int totalInsectosHoy;
  final int totalAlertasActivas;
  final DateTime ultimaActualizacion;
}
```

#### 1.2 Extender Modelos Existentes
**M√©todos a Agregar en `InsectTypeData`**:
- `AlertLevel calculateAlertLevel(int threshold)`
- `double calculateTrendPercentage(int previousValue)`
- `IconData getTrendIcon()`

### **FASE 2: Servicios de Datos**

#### 2.1 Extender ChartDataService
**Archivo**: <mcfile name="chart_data_service.dart" path="lib/services/chart_data_service.dart"></mcfile>

**Nuevos M√©todos**:
```dart
static Future<ChartDataResponse<InsectDashboardSummary>> fetchInsectIndicators({
  int daysForComparison = 1,
}) async

static Future<ChartDataResponse<List<InsectIndicatorData>>> fetchInsectTypeIndicators({
  DateTime? targetDate,
}) async

static Future<ChartDataResponse<Map<String, int>>> fetchInsectThresholds() async
```

#### 2.2 Crear Servicio de Configuraci√≥n
**Archivo Nuevo**: `lib/services/indicator_config_service.dart`

**Clases y M√©todos**:
```dart
class IndicatorConfigService {
  static const Map<String, int> defaultThresholds = {
    'mosca': 50,
    'mosquito': 30,
    'abeja': 20,
    // ... otros tipos
  };
  
  static Future<Map<String, int>> loadThresholds()
  static Future<bool> saveThresholds(Map<String, int> thresholds)
  static AlertLevel calculateAlertLevel(int current, int threshold)
}
```

### **FASE 3: Widgets de Indicadores**

#### 3.1 Widget Principal de Indicadores
**Archivo Nuevo**: `lib/widgets/charts/insect_indicators_grid.dart`

**Clase Principal**:
```dart
class InsectIndicatorsGrid extends StatefulWidget {
  final double? height;
  final int crossAxisCount;
  final bool showTrends;
  final VoidCallback? onRefresh;
}

class _InsectIndicatorsGridState extends State<InsectIndicatorsGrid> {
  InsectDashboardSummary? dashboardData;
  bool isLoading = true;
  String? errorMessage;
  
  // M√©todos:
  Future<void> _loadIndicators()
  Widget _buildIndicatorCard(InsectIndicatorData indicator)
  Widget _buildLoadingGrid()
  Widget _buildErrorState()
}
```

#### 3.2 Widget de Tarjeta Individual
**Archivo Nuevo**: `lib/widgets/charts/insect_indicator_card.dart`

**Clase Principal**:
```dart
class InsectIndicatorCard extends StatelessWidget {
  final InsectIndicatorData indicator;
  final bool showTrend;
  final VoidCallback? onTap;
  
  // M√©todos:
  Widget _buildHeader()
  Widget _buildMainValue()
  Widget _buildTrendIndicator()
  Widget _buildAlertBadge()
  Color _getCardBorderColor()
}
```

#### 3.3 Widget de Resumen General
**Archivo Nuevo**: `lib/widgets/charts/insects_summary_card.dart`

**Clase Principal**:
```dart
class InsectsSummaryCard extends StatelessWidget {
  final InsectDashboardSummary summary;
  final double? height;
  
  // M√©todos:
  Widget _buildTotalInsects()
  Widget _buildActiveAlerts()
  Widget _buildLastUpdate()
  Widget _buildQuickStats()
}
```

### **FASE 4: Integraci√≥n en Dashboard**

#### 4.1 Modificaciones en DashboardScreen
**Archivo**: <mcfile name="dashboard_screen.dart" path="lib/views/dashboard_screen.dart"></mcfile>

**Nuevas Variables de Estado**:
```dart
InsectDashboardSummary? insectSummary;
bool isLoadingIndicators = true;
String? indicatorsError;
```

**Nuevos M√©todos**:
```dart
Future<void> _loadInsectIndicators() async
Widget _buildInsectIndicatorsSection()
Widget _buildResponsiveIndicatorsRow()
Widget _buildMobileIndicatorsLayout()
Widget _buildTabletIndicatorsLayout()
```

#### 4.2 Integraci√≥n en Layout Responsive
**Modificaciones en M√©todos Existentes**:
- `_buildResponsiveSummaryCards()`: Agregar tarjeta de resumen de insectos
- `build()`: Incluir `_buildInsectIndicatorsSection()` despu√©s de las tarjetas de resumen
- `_refreshAllData()`: Agregar llamada a `_loadInsectIndicators()`

### **FASE 5: Configuraci√≥n y Personalizaci√≥n**

#### 5.1 Pantalla de Configuraci√≥n de Umbrales
**Archivo Nuevo**: `lib/views/indicator_settings_screen.dart`

**Clase Principal**:
```dart
class IndicatorSettingsScreen extends StatefulWidget {}

class _IndicatorSettingsScreenState extends State<IndicatorSettingsScreen> {
  Map<String, int> thresholds = {};
  List<String> insectTypes = [];
  
  // M√©todos:
  Future<void> _loadCurrentSettings()
  Future<void> _saveSettings()
  Widget _buildThresholdSlider(String insectType, int currentValue)
  Widget _buildPreviewCard(String insectType)
}
```

#### 5.2 Integraci√≥n en Men√∫ Principal
**Archivo**: <mcfile name="side_menu.dart" path="lib/widgets/side_menu.dart"></mcfile>

**Agregar Opci√≥n de Men√∫**:
- Nuevo `ListTile` para "Configuraci√≥n de Indicadores"
- Navegaci√≥n a `IndicatorSettingsScreen`

### **FASE 6: Optimizaciones y Mejoras**

#### 6.1 Sistema de Cache
**Archivo Nuevo**: `lib/services/indicator_cache_service.dart`

**Funcionalidades**:
```dart
class IndicatorCacheService {
  static const Duration cacheExpiry = Duration(minutes: 5);
  
  static Future<void> cacheIndicators(InsectDashboardSummary data)
  static Future<InsectDashboardSummary?> getCachedIndicators()
  static bool isCacheValid(DateTime lastUpdate)
  static Future<void> clearCache()
}
```

#### 6.2 Animaciones y Transiciones
**Mejoras en Widgets**:
- Animaciones de carga en `InsectIndicatorCard`
- Transiciones suaves para cambios de estado
- Efectos visuales para alertas cr√≠ticas

#### 6.3 Notificaciones Push (Opcional)
**Archivo Nuevo**: `lib/services/notification_service.dart`

**Para Alertas Cr√≠ticas**:
- Integraci√≥n con sistema de notificaciones locales
- Alertas cuando se superan umbrales cr√≠ticos

### **FASE 7: Testing y Validaci√≥n**

#### 7.1 Archivos de Test
**Crear**:
- `test/services/indicator_config_service_test.dart`
- `test/widgets/insect_indicator_card_test.dart`
- `test/models/chart_models_test.dart`

#### 7.2 Datos de Prueba
**Archivo**: `test/fixtures/indicator_test_data.dart`
- Mock data para diferentes escenarios
- Casos edge para validaci√≥n

## üì± Layout Responsive Detallado

### Mobile (< 600px):
- **Resumen**: 1 columna con tarjeta de resumen general
- **Indicadores**: Grid 2x2 con scroll vertical
- **Altura**: Cards de 120px

### Tablet (600-1200px):
- **Resumen**: 1 fila con 3 tarjetas (Total, Alertas, √öltima actualizaci√≥n)
- **Indicadores**: Grid 3x2 o 4x2 seg√∫n cantidad de tipos
- **Altura**: Cards de 140px

### Desktop (> 1200px):
- **Resumen**: 1 fila con 4 tarjetas incluyendo estad√≠sticas adicionales
- **Indicadores**: Grid 4x3 o 5x2 con mayor densidad
- **Altura**: Cards de 160px

## üé® Especificaciones Visuales

### Colores de Alerta:
- **Normal**: `AppTheme.primaryBlue` (azul del tema)
- **Warning**: `Color(0xFFFF9800)` (naranja)
- **Critical**: `Color(0xFFF44336)` (rojo)

### Iconos de Tendencia:
- **Up**: `Icons.trending_up` (verde)
- **Down**: `Icons.trending_down` (rojo)
- **Stable**: `Icons.trending_flat` (gris)

### Animaciones:
- **Duraci√≥n**: 300ms para transiciones
- **Curva**: `Curves.easeInOut`
- **Efectos**: Pulse para alertas cr√≠ticas

## üîß Configuraci√≥n de Dependencias

**No se requieren nuevas dependencias** - El proyecto ya tiene:
- `fl_chart: ^0.68.0`
- `http: ^1.1.0`
- `intl: ^0.19.0`

## üìã Checklist de Implementaci√≥n

### Modelos y Servicios:
- [ ] Crear `InsectIndicatorData` y clases relacionadas
- [ ] Extender `ChartDataService` con m√©todos de indicadores
- [ ] Crear `IndicatorConfigService`
- [ ] Implementar `IndicatorCacheService`

### Widgets:
- [ ] Crear `InsectIndicatorsGrid`
- [ ] Crear `InsectIndicatorCard`
- [ ] Crear `InsectsSummaryCard`
- [ ] Integrar en `DashboardScreen`

### Configuraci√≥n:
- [ ] Crear `IndicatorSettingsScreen`
- [ ] Agregar opci√≥n en men√∫ lateral
- [ ] Implementar persistencia de configuraci√≥n

### Testing:
- [ ] Tests unitarios para servicios
- [ ] Tests de widgets
- [ ] Validaci√≥n de datos mock

### Optimizaci√≥n:
- [ ] Sistema de cache
- [ ] Animaciones y transiciones
- [ ] Responsive design validation

Este plan aprovecha completamente la infraestructura existente del proyecto, reutiliza patrones establecidos y mantiene la consistencia con el dise√±o actual del dashboard.
        